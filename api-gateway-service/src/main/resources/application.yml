server:
  port: 8000

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka


spring:
  application:
    name: api-gateway-service
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest
  cloud:
    gateway:
      default-filters:
        - name: GlobalFilter
          args:
            baseMessage: Spring Cloud Gateway GlobalFilter
            preLogger: true
            postLogger: true
      routes:
#        - id: user-service
#          uri: lb://USER-SERVICE
#          predicates:
#            - Path=/user-service/**
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/login
            - Method=POST
          filters:
#            - RemoveRequestHeader=Cookie #SpringBoot 3.3.x 부터 버전에 맞는 Spring Security에선 ServerHttpRequest/Response 의 헤더 불변으로 예외 발생. commit 전에 set() 수정 가능함.
            # Spring Security는 요청을 처리하는 과정에서 인증/인가를 위해 SeverHttpRequest 객체를 수정한다. 이 과정에서 요청 객체가 래핑되어 원본과 다른 인스턴스로 변환될 수 있다. -> RemoveRequestHeader 필터는 헤더를 제거하기 위해 SeverHttpRequest.mutate()를 호출하지만 Spring Security가 래핑한 객체는 이런 호출을 제대로 지원하지 않을 수 있다.
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/users
            - Method=POST
          filters:
#            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/actuator/**
            - Method=GET,POST
          filters:
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/**
            - Method=GET
          filters:
#            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
            - AuthorizationHeaderFilter
        - id: catalog-service
          uri: lb://CATALOG-SERVICE
          predicates:
            - Path=/catalog-service/**
          filters:
            - name: CustomFilter
        - id: order-service
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/order-service/**
          filters:
            - name: CustomFilter
        - id: first-service
          uri: lb://FIRST-SERVICE #lb는 eureka 연동 시 서비스명으로 패스
          # predicates는 프록시 패스 경로 지정
          # Predicates의 Path는 uri + predicates 경로 형식으로 호출된다.
          predicates:
            - Path=/first-service/**
          filters:
#            - AddRequestHeader=first-request, first-request-header2
#            - AddResponseHeader=first-response, first-response-header2
            - CustomFilter
        - id: second-service
          uri: lb://SECOND-SERVICE #lb는 eureka 연동 시 서비스명으로 패스
          predicates:
            - Path=/second-service/**
          filters:
            - name: CustomFilter
            - name: LoggingFilter
              args:
                baseMessage: Hi, there.
                preLogger: true
                postLogger: true
#            - AddRequestHeader=first-request, first-request-header2
#            - AddResponseHeader=first-response, first-response-header2
#token:
#  expiration-time: 86400000
#  secret: user_token_test_user_token_test_user_token_test

management:
  endpoints:
    web:
      exposure:
#        include: refresh, health, beans, httpexchanges, busrefresh, info, metrics, prometheus
        include: refresh, health, beans, httptrace, busrefresh

version: '3.9'

services:
########### infrastructure ########################################################
  db:
    container_name: db
    image: mysql:8.0.40
    restart: always
    ports:
      - "3306:3306"
    volumes:
      - /Users/volka/dev/msa_mysql:/var/lib/mysql
    environment:
      MYSQL_DATABASE: 'ecommerce'
      MYSQL_USER: 'user'
      MYSQL_PASSWORD: 'test1234'
      MYSQL_ROOT_PASSWORD: 'rootpass'
      TZ: Asia/Seoul
    networks:
      - ecommerce-network
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:4-management-alpine
    restart: always
    ports:
      - "15671:15671"
      - "15672:15672" # admin port
      - "4369:4369"
      - "5671:5671"
      - "5672:5672" # message port
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    networks:
      - ecommerce-network


  zookeeper:
    image: confluentinc/cp-zookeeper:7.8.0
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    environment:
#      ZOOKEEPER_SERVER_ID: 1 # 주키퍼 클러스터에서 유일하게 주키퍼를 식별할 아이디
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000 # 주키퍼 클러스터 구성 시 동기화를 위한 기본 틱 타임 지정 (ms 단위)
#      ZOOKEEPER_SYNC_LIMIT: 2 # 주키퍼 리더와 나머지 서버들의 싱크 타임. 틱타임 * 싱크타임. 멀티 브로커에서 유효한 속성이다.
    networks:
      ecommerce-network:
        ipv4_address: 172.18.0.100

  kafka-broker:
#    image: apache/kafka:3.7.2
    image: confluentinc/cp-kafka:7.8.0
    container_name: kafka-broker
    restart: always
    ports:
      - "9092:9092" # plain text
      - "9101:9101" # JMX
#      - "9093:9093" # controller broker
    depends_on:
      - zookeeper # zookeeper 모드 사용 시 주키퍼 이후에 런 돼야한다.
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_HOST_NAME: 172.18.0.101 # 멀티 브로커 사용 시 루프백 IP 쓰지 말아야함.
#      KAFKA_ADVERTISED_HOST_NAME: 172.18.0.101
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://172.18.0.101:9092, PLAINTEXT_DOCKER://kafka-broker:19092 # 필수. KRaft 모드 시 컨트롤러도 설정
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_DOCKER:PLAINTEXT
#      KAFKA_LISTENER: PLAINTEXT://localhost:9092, PLAINTEXT_DOCKER://kafka-broker:19092
      KAFKA_CREATE_TOPICS: "test:1:1" # <topic_name>:<partitions>:<replication_factor>
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 # 기본 복제 개수
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181 # zookeeper 연결 명령어
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: 172.18.0.101
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      ecommerce-network:
        ipv4_address: 172.18.0.101

########## KRaft 모드 시 필요 옵션 ##########
#      KAFKA_NODE_ID: 1 # KRaft 모드 사용 시 노드 아이디
#      KAFKA_PROCESS_ROLES: broker,controller # KRaft 모드 시 역할 지정
#      KAFKA_LISTENERS: PLAINTEXT://localhost:9092,CONTROLLER://localhost:9093
#      KAFKA_LISTENERS: PLAINTEXT://localhost:9092
#      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
#      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093 # KRaft 모드 전용. broker.id 와 설정값이 일치해야 함
#      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
#      KAFKA_NUM_PARTITIONS: 3
#      KAFKA_LOG_DIRS: /tmp/kraft-logs
#      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT

  kafka-connect-jdbc:
    image: confluentinc/cp-kafka-connect:7.8.0
    container_name: kafka-connect-jdbc
    restart: always
    ports:
      - "8083:8083"
    depends_on:
      - zookeeper
      - kafka-broker
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka-broker:19092
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: "test-group"
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO # root 로그 레벨 설정. DEBUG 시 컨슈머 로그가 다 찍힌다
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR" # 로그 에러 표시
      CONNECT_PLUGIN_PATH: "/usr/share/java,/etc/kafka-connect/jars"
    volumes:
      - "./kafka-connector-plugin/lib:/etc/kafka-connect/jars"
      - "./kafka-connector-plugin/jdbc_driver/mysql-connector-j-8.3.0.jar:/usr/share/java/kafka/mysql-connector-j-8.3.0.jar"
    networks:
      - ecommerce-network
#    command:
#      - bash
#      - -c
#      - |
#        confluent-hub install --no-prompt debezium/debezium-connector-mysql:latest
#        confluent-hub install --no-prompt confluentinc/kafka-connect-datagen:0.4.0
#        /etc/confluent/docker/run



#  zipkin-db:
#    image: mysql:8.0.40
#    container_name: zipkin-db
#    restart: always
#    environment:
#      - MYSQL_DATABASE=zipkin
#      - MYSQL_USER=zipkin
#      - MYSQL_PASSWORD=zipkin
#      - MYSQL_ROOT_PASSWORD=root
#    ports:
#      - "3307:3306"
#    networks:
#      - observe-network

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    restart: always
#    depends_on:
#      - zipkin-db
#    environment:
#      - STORAGE_TYPE=mysql
#      - MYSQL_DB=zipkin
#      - MYSQL_USER=zipkin
#      - MYSQL_PASS=zipkin
#      - MYSQL_HOST=zipkin-db
    networks:
      - ecommerce-network


  ######## Monitoring ################
  prometheus:
    image: prom/prometheus:v3.1.0
    container_name: prometheus
    restart: always
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - ecommerce-network

  grafana:
    image: grafana/grafana:11.4.0
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    networks:
      - ecommerce-network


########### service ########################################################
  config-service:
    container_name: config-service
    build: config-service
    ports:
      - "8888:8888"
    restart: always
    depends_on:
      - rabbitmq
    environment:
      - spring.rabbitmq.host=rabbitmq
    networks:
      - ecommerce-network

  discovery-service:
    container_name: discovery-service
    build: discovery-service
    restart: always
    ports:
      - "8761:8761"
    depends_on:
      - config-service
    environment:
      - spring.cloud.config.uri=http://config-service:8888
    networks:
      - ecommerce-network

  api-gateway-service:
    container_name: api-gateway-service
    build: api-gateway-service
    restart: always
    ports:
      - "8000:8000"
    depends_on:
      - config-service
      - discovery-service
    environment:
      - spring.cloud.config.uri=http://config-service:8888
      - spring.rabbitmq.host=rabbitmq
      - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/
    networks:
      ecommerce-network:
        ipv4_address: 172.18.0.200


  user-service:
    container_name: user-service
    build: user-service
    restart: always
    depends_on:
      - config-service
      - api-gateway-service
      - db
    environment:
      - spring.cloud.config.uri=http://config-service:8888
      - spring.rabbitmq.host=rabbitmq
      - spring.datasource.url=jdbc:mysql://db:3306/ecommerce
      - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/
      - management.zipkin.tracing.endpoint=http://zipkin:9411/api/v2/spans
      - logging.file=/api-logs/users-ws.log
    networks:
      - ecommerce-network

  order-service:
    container_name: order-service
    build: order-service
    restart: always
    depends_on:
      - config-service
      - api-gateway-service
      - db
    environment:
      - spring.cloud.config.uri=http://config-service:8888
      - spring.rabbitmq.host=rabbitmq
      - spring.datasource.url=jdbc:mysql://db:3306/ecommerce
      - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/
      - management.zipkin.tracing.endpoint=http://zipkin:9411/api/v2/spans
      - logging.file=/api-logs/orders-ws.log
    networks:
      - ecommerce-network

  catalog-service:
    container_name: catalog-service
    build: catalog-service
    restart: always
    depends_on:
      - config-service
      - api-gateway-service
      - db
    environment:
      - spring.cloud.config.uri=http://config-service:8888
      - spring.rabbitmq.host=rabbitmq
      - spring.datasource.url=jdbc:mysql://db:3306/ecommerce
      - eureka.client.serviceUrl.defaultZone=http://discovery-service:8761/eureka/
      - management.zipkin.tracing.endpoint=http://zipkin:9411/api/v2/spans
      - logging.file=/api-logs/catalogs-ws.log
    networks:
      - ecommerce-network

networks:
  ecommerce-network:
    driver: bridge
    name: ecommerce-network
    external: true
    #    attachable: true
    ipam:
      driver: default
      config:
        - gateway: 172.18.0.1
        - subnet: 172.18.0.0/16
